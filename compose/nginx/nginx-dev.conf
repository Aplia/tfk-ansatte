user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;

  #gzip  on;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  upstream backend {
    server backend:8000;
  }

  # The livereload is running inside the docker container on port 35729
  upstream livereload {
    server frontend:${WEB_PORT};
  }

  upstream frontend {
    server frontend:4200;
  }

  # Default server which catches all entries without a proper domain
  # These are typically malicious or malformed requests
  server {
    listen 80 default_server;
    return 444;
  }

  server {
    listen 80;
    server_name *.ngrok.io localhost;
    charset     utf-8;

    # Backend service is entirely placed behind /backend
    location /backend {
      # checks for static file, if not found proxy to backend
      try_files $uri @proxy_to_backend;
    }

    location / {
      # checks for static file, if not found proxy to backend
      try_files $uri @proxy_to_frontend;
    }

    # Web-Socket proxy for livereload, the path is hardcoded to /livereload
    location /livereload {
        rewrite ^/livereload/(.*) /$1 break;
        access_log off; # Turn off access log as they are quite frequent
        proxy_pass http://livereload;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Web proxy for livereload assets, this is most likely /livereload/livereload.js
    location ~ ^/livereload/.* {
        rewrite ^/livereload/(.*) /$1 break;
        proxy_pass http://livereload;
    }

    # web frontend (ember)
    location @proxy_to_frontend {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header User-Agent $http_user_agent;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_redirect off;
      proxy_pass   http://frontend;
    }

    # web backend (django)
    location @proxy_to_backend {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header User-Agent $http_user_agent;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_redirect off;
      proxy_pass   http://backend;
    }
  }
}
